import asyncio
import logging
import sqlite3
from datetime import datetime, timedelta
import aiohttp
import hashlib
import hmac
from urllib.parse import urlencode
import json
import random
from typing import Dict, List, Optional

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8281958666:AAHNA1903HsTFIKk9EIzo8iZTDRubd9Efio"
CRYPTO_PAY_TOKEN = "460274:AA4zckIq0DlJPxe6J54euvqE0Cyc95CcvUO"
CASINO_CHANNEL_ID = -1003045077123
CASINO_CHANNEL_URL = "https://t.me/cryptorush_24_7"
NEWS_CHANNEL_URL = "https://t.me/worldauk"
SUPPORT_USERNAME = "@Dimfulsvazbot"
BETS_CHANNEL_ID = -1003045077123
ADMIN_USERNAMES = ["Dimful_dmf", "S21_M_A"]
WEB_APP_URL = "https://python-template-a5c8.replit.app"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserStates(StatesGroup):
    waiting_deposit_amount = State()
    waiting_bet_amount = State()
    selecting_balance = State()
    waiting_username = State()
    waiting_bonus_amount = State()
    waiting_promo_code = State()
    waiting_withdrawal_amount = State()

    # –ò–≥—Ä–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    playing_dice_dynasty = State()
    playing_crash_rocket = State()
    playing_slot_legends = State()
    playing_roulette_rush = State()
    playing_blackjack_battle = State()
    playing_mines_mayhem = State()
    playing_wheel_wizard = State()
    playing_coin_clash = State()
    playing_poker_pro = State()
    playing_baccarat_blitz = State()

    # –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–µ–π—Å–æ–≤
    opening_case = State()
    selecting_case = State()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–≥—Ä –∏ –∫–µ–π—Å–æ–≤
GAMES_CONFIG = {
    'coin_clash': {'name': 'Coin Clash', 'emoji': 'ü™ô', 'max_multiplier': 2.0, 'min_bet': 0.5},
    'dice_dynasty': {'name': 'Dice Dynasty', 'emoji': 'üé≤', 'max_multiplier': 6.0, 'min_bet': 0.5},
    'crash_rocket': {'name': 'Crash Rocket', 'emoji': 'üöÄ', 'max_multiplier': 100.0, 'min_bet': 1.0},
    'slot_legends': {'name': 'Slot Legends', 'emoji': 'üé∞', 'max_multiplier': 1000.0, 'min_bet': 0.5},
    'roulette_rush': {'name': 'Roulette Rush', 'emoji': 'üéØ', 'max_multiplier': 36.0, 'min_bet': 1.0},
    'blackjack_battle': {'name': 'Blackjack Battle', 'emoji': 'üÉè', 'max_multiplier': 2.5, 'min_bet': 1.0},
    'mines_mayhem': {'name': 'Mines Mayhem', 'emoji': 'üíé', 'max_multiplier': 50.0, 'min_bet': 0.5},
    'wheel_wizard': {'name': 'Wheel Wizard', 'emoji': 'üé®', 'max_multiplier': 20.0, 'min_bet': 0.5},
    'poker_pro': {'name': 'Poker Pro', 'emoji': '‚ô†Ô∏è', 'max_multiplier': 10.0, 'min_bet': 2.0},
    'baccarat_blitz': {'name': 'Baccarat Blitz', 'emoji': 'üí≥', 'max_multiplier': 2.0, 'min_bet': 1.0}
}

CASES_CONFIG = {
    'cs_go_classic': {'name': 'CS:GO Classic', 'price': 5.0, 'emoji': 'üì¶'},
    'knife_collection': {'name': 'Knife Collection', 'price': 25.0, 'emoji': 'üî™'},
    'rare_skins': {'name': 'Rare Skins', 'price': 10.0, 'emoji': '‚ú®'},
    'glove_case': {'name': 'Glove Case', 'price': 15.0, 'emoji': 'üß§'},
    'weapon_master': {'name': 'Weapon Master', 'price': 20.0, 'emoji': 'üî´'},
    'legend_box': {'name': 'Legend Box', 'price': 50.0, 'emoji': 'üëë'},
    'starter_pack': {'name': 'Starter Pack', 'price': 2.0, 'emoji': 'üéÅ'},
    'premium_vault': {'name': 'Premium Vault', 'price': 100.0, 'emoji': 'üíé'},
    'mystery_chest': {'name': 'Mystery Chest', 'price': 7.5, 'emoji': '‚ùì'},
    'golden_cache': {'name': 'Golden Cache', 'price': 75.0, 'emoji': 'üèÜ'}
}

ITEMS_POOL = [
    # –û–±—ã—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã (Common)
    {'name': 'AK-47 | Redline', 'rarity': 'common', 'value': 5.0, 'chance': 30},
    {'name': 'M4A4 | Howl', 'rarity': 'common', 'value': 8.0, 'chance': 25},
    {'name': 'AWP | Dragon Lore', 'rarity': 'common', 'value': 12.0, 'chance': 20},

    # –†–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã (Rare)
    {'name': 'Butterfly Knife | Fade', 'rarity': 'rare', 'value': 50.0, 'chance': 15},
    {'name': 'Karambit | Doppler', 'rarity': 'rare', 'value': 75.0, 'chance': 8},

    # –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã (Legendary)
    {'name': 'Dragon Lore Souvenir', 'rarity': 'legendary', 'value': 200.0, 'chance': 1.5},
    {'name': 'Karambit | Case Hardened', 'rarity': 'legendary', 'value': 500.0, 'chance': 0.5}
]

PROMO_CODES = {
    'WELCOME2024': {'bonus': 10.0, 'uses_left': 100, 'type': 'bonus'},
    'RUSH100': {'bonus': 25.0, 'uses_left': 50, 'type': 'main'},
    'CRYPTO50': {'bonus': 5.0, 'uses_left': 200, 'type': 'bonus'},
    'VIP2024': {'bonus': 100.0, 'uses_left': 10, 'type': 'main'}
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('casino.db')
    c = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è)
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        balance REAL DEFAULT 0,
        bonus_balance REAL DEFAULT 0,
        rush_coins INTEGER DEFAULT 0,
        bonus_points INTEGER DEFAULT 0,
        loyalty_tokens INTEGER DEFAULT 0,
        total_bets REAL DEFAULT 0,
        games_played INTEGER DEFAULT 0,
        wins INTEGER DEFAULT 0,
        referral_earnings REAL DEFAULT 0,
        referrals_count INTEGER DEFAULT 0,
        referrer_id INTEGER,
        registration_date TEXT,
        ref_link TEXT,
        level INTEGER DEFAULT 1,
        experience INTEGER DEFAULT 0,
        daily_streak INTEGER DEFAULT 0,
        last_daily_claim TEXT,
        premium_expires TEXT,
        achievements TEXT DEFAULT '[]',
        inventory TEXT DEFAULT '[]',
        current_mission TEXT DEFAULT '{}',
        dice_boosts INTEGER DEFAULT 0,
        crash_insurance INTEGER DEFAULT 0,
        slot_multiplier REAL DEFAULT 1.0
    )''')

    # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    c.execute('''CREATE TABLE IF NOT EXISTS transactions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        amount REAL,
        currency TEXT DEFAULT 'USDT',
        type TEXT,
        date TEXT,
        check_id TEXT,
        status TEXT DEFAULT 'completed'
    )''')

    # –¢–∞–±–ª–∏—Ü–∞ –∏–≥—Ä (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è)
    c.execute('''CREATE TABLE IF NOT EXISTS games (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        game_type TEXT,
        bet_amount REAL,
        win_amount REAL,
        result TEXT,
        multiplier REAL,
        date TEXT,
        details TEXT DEFAULT '{}'
    )''')

    # –¢–∞–±–ª–∏—Ü–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
    c.execute('''CREATE TABLE IF NOT EXISTS tournaments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        game_type TEXT,
        start_date TEXT,
        end_date TEXT,
        prize_pool REAL,
        participants TEXT DEFAULT '[]',
        status TEXT DEFAULT 'upcoming'
    )''')

    # –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
    c.execute('''CREATE TABLE IF NOT EXISTS tournament_leaderboard (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        tournament_id INTEGER,
        user_id INTEGER,
        score REAL DEFAULT 0,
        games_played INTEGER DEFAULT 0,
        last_update TEXT
    )''')

    # –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    c.execute('''CREATE TABLE IF NOT EXISTS achievements (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        description TEXT,
        reward_type TEXT,
        reward_amount REAL,
        condition_type TEXT,
        condition_value INTEGER
    )''')

    # –¢–∞–±–ª–∏—Ü–∞ –º–∏—Å—Å–∏–π
    c.execute('''CREATE TABLE IF NOT EXISTS missions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        description TEXT,
        reward_type TEXT,
        reward_amount REAL,
        condition_type TEXT,
        condition_value INTEGER,
        daily BOOLEAN DEFAULT 0
    )''')

    # –¢–∞–±–ª–∏—Ü–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    c.execute('''CREATE TABLE IF NOT EXISTS used_promocodes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        promo_code TEXT,
        used_date TEXT
    )''')

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    achievements = [
        ("–ü–µ—Ä–≤–∞—è —Å—Ç–∞–≤–∫–∞", "–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å—Ç–∞–≤–∫—É", "rush_coins", 100, "games_played", 1),
        ("–í–µ–∑—É–Ω—á–∏–∫", "–í—ã–∏–≥—Ä–∞–π—Ç–µ 10 –∏–≥—Ä –ø–æ–¥—Ä—è–¥", "bonus_points", 500, "win_streak", 10),
        ("–•–∞–π—Ä–æ–ª–ª–µ—Ä", "–ü–æ—Å—Ç–∞–≤—å—Ç–µ 1000 USDT –∑–∞ —Ä–∞–∑", "loyalty_tokens", 50, "single_bet", 1000),
        ("–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü", "–°—ã–≥—Ä–∞–π—Ç–µ 100 –∏–≥—Ä", "rush_coins", 1000, "games_played", 100),
        ("–ú–∏–ª–ª–∏–æ–Ω–µ—Ä", "–í—ã–∏–≥—Ä–∞–π—Ç–µ 10000 USDT", "loyalty_tokens", 200, "total_wins", 10000)
    ]

    for achievement in achievements:
        c.execute("INSERT OR IGNORE INTO achievements (name, description, reward_type, reward_amount, condition_type, condition_value) VALUES (?, ?, ?, ?, ?, ?)", achievement)

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏—Å—Å–∏–π
    missions = [
        ("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —É–¥–∞—á–∞", "–°—ã–≥—Ä–∞–π—Ç–µ 5 –∏–≥—Ä", "bonus_points", 50, "daily_games", 5, 1),
        ("–£–¥–∞—á–ª–∏–≤—ã–π —á–∞—Å", "–í—ã–∏–≥—Ä–∞–π—Ç–µ 3 –∏–≥—Ä—ã", "rush_coins", 100, "daily_wins", 3, 1),
        ("–ò–Ω–≤–µ—Å—Ç–æ—Ä", "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ 10 USDT", "loyalty_tokens", 10, "daily_deposit", 10, 1)
    ]

    for mission in missions:
        c.execute("INSERT OR IGNORE INTO missions (name, description, reward_type, reward_amount, condition_type, condition_value, daily) VALUES (?, ?, ?, ?, ?, ?, ?)", mission)

    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_user(user_id):
    conn = sqlite3.connect('casino.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = c.fetchone()
    conn.close()
    return user

def create_user(user_id, username, first_name, referrer_id=None):
    conn = sqlite3.connect('casino.db')
    c = conn.cursor()

    ref_link = f"https://t.me/CryptoRushCazino_Bot?start={user_id}"
    registration_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –±–æ–Ω—É—Å—ã
    starting_bonus = 5.0
    starting_rush_coins = 1000
    starting_bonus_points = 100

    c.execute("""INSERT INTO users (
        user_id, username, first_name, referrer_id, registration_date, ref_link,
        bonus_balance, rush_coins, bonus_points
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)""", 
              (user_id, username, first_name, referrer_id, registration_date, ref_link,
               starting_bonus, starting_rush_coins, starting_bonus_points))

    conn.commit()
    conn.close()

def update_user_balance(user_id, amount, balance_type='main'):
    conn = sqlite3.connect('casino.db')
    c = conn.cursor()

    if balance_type == 'main':
        c.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
    elif balance_type == 'bonus':
        c.execute("UPDATE users SET bonus_balance = bonus_balance + ? WHERE user_id = ?", (amount, user_id))
    elif balance_type == 'rush_coins':
        c.execute("UPDATE users SET rush_coins = rush_coins + ? WHERE user_id = ?", (amount, user_id))
    elif balance_type == 'bonus_points':
        c.execute("UPDATE users SET bonus_points = bonus_points + ? WHERE user_id = ?", (amount, user_id))
    elif balance_type == 'loyalty_tokens':
        c.execute("UPDATE users SET loyalty_tokens = loyalty_tokens + ? WHERE user_id = ?", (amount, user_id))

    conn.commit()
    conn.close()

def get_user_level_info(user_id):
    user = get_user(user_id)
    if not user:
        return None

    experience = user[18]
    level = user[17]

    # –§–æ—Ä–º—É–ª–∞ —É—Ä–æ–≤–Ω—è: —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å = —Ç–µ–∫—É—â–∏–π_—É—Ä–æ–≤–µ–Ω—å * 1000
    exp_for_next = level * 1000

    return {
        'level': level,
        'experience': experience,
        'exp_for_next': exp_for_next,
        'progress': (experience / exp_for_next) * 100 if exp_for_next > 0 else 0
    }

def add_experience(user_id, exp_amount):
    conn = sqlite3.connect('casino.db')
    c = conn.cursor()

    user = get_user(user_id)
    if not user:
        conn.close()
        return

    current_exp = user[18]
    current_level = user[17]
    new_exp = current_exp + exp_amount

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    exp_needed = current_level * 1000
    new_level = current_level

    while new_exp >= exp_needed:
        new_exp -= exp_needed
        new_level += 1
        exp_needed = new_level * 1000

        # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        level_reward = new_level * 100  # RUSH Coins
        c.execute("UPDATE users SET rush_coins = rush_coins + ? WHERE user_id = ?", (level_reward, user_id))

    c.execute("UPDATE users SET experience = ?, level = ? WHERE user_id = ?", (new_exp, new_level, user_id))
    conn.commit()
    conn.close()

    return new_level > current_level  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –±—ã–ª –ø–æ–≤—ã—à–µ–Ω —É—Ä–æ–≤–µ–Ω—å

def check_daily_bonus(user_id):
    user = get_user(user_id)
    if not user:
        return False

    last_claim = user[20]  # last_daily_claim
    if not last_claim:
        return True

    last_claim_date = datetime.strptime(last_claim, "%Y-%m-%d")
    today = datetime.now().date()

    return today > last_claim_date

def claim_daily_bonus(user_id):
    if not check_daily_bonus(user_id):
        return None

    conn = sqlite3.connect('casino.db')
    c = conn.cursor()

    user = get_user(user_id)
    streak = user[19] + 1  # daily_streak

    # –ë–æ–Ω—É—Å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å–æ —Å—Ç—Ä–∏–∫–æ–º
    base_bonus = 2.0
    bonus_amount = base_bonus + (streak * 0.5)
    rush_coins = 50 + (streak * 10)

    if streak >= 7:  # –ù–µ–¥–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å
        bonus_amount *= 2
        rush_coins *= 2

    today = datetime.now().strftime("%Y-%m-%d")

    c.execute("""UPDATE users SET 
                 bonus_balance = bonus_balance + ?,
                 rush_coins = rush_coins + ?,
                 daily_streak = ?,
                 last_daily_claim = ?
                 WHERE user_id = ?""", 
              (bonus_amount, rush_coins, streak, today, user_id))

    conn.commit()
    conn.close()

    return {'bonus': bonus_amount, 'rush_coins': rush_coins, 'streak': streak}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def check_subscription(user_id):
    try:
        member = await bot.get_chat_member(CASINO_CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"Error checking subscription for user {user_id}: {e}")
        return True  # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_subscription_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É", url=CASINO_CHANNEL_URL)],
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
    ])
    return keyboard

def get_main_menu_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="games_menu"), 
         InlineKeyboardButton(text="üì¶ –ö–µ–π—Å—ã", callback_data="cases_menu")],
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"), 
         InlineKeyboardButton(text="üèÜ –¢—É—Ä–Ω–∏—Ä—ã", callback_data="tournaments")],
        [InlineKeyboardButton(text="üéØ –ú–∏—Å—Å–∏–∏", callback_data="missions"), 
         InlineKeyboardButton(text="ü§ù –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referral")],
        [InlineKeyboardButton(text="üåê –í–µ–±-–∫–∞–∑–∏–Ω–æ", web_app=WebAppInfo(url=WEB_APP_URL))],
        [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ])
    return keyboard

def get_games_keyboard():
    builder = InlineKeyboardBuilder()

    for game_id, config in GAMES_CONFIG.items():
        builder.button(
            text=f"{config['emoji']} {config['name']}",
            callback_data=f"game_{game_id}"
        )

    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return builder.as_markup()

def get_cases_keyboard():
    builder = InlineKeyboardBuilder()

    for case_id, config in CASES_CONFIG.items():
        builder.button(
            text=f"{config['emoji']} {config['name']} - {config['price']} USDT",
            callback_data=f"case_{case_id}"
        )

    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory"))
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return builder.as_markup()

def get_profile_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
         InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements"),
         InlineKeyboardButton(text="üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data="daily_bonus")],
        [InlineKeyboardButton(text="üéØ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promo"),
         InlineKeyboardButton(text="üëë –ü—Ä–µ–º–∏—É–º", callback_data="premium")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    return keyboard

def get_balance_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"),
         InlineKeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")],
        [InlineKeyboardButton(text="üí± –û–±–º–µ–Ω—è—Ç—å –≤–∞–ª—é—Ç—ã", callback_data="exchange")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")]
    ])
    return keyboard

# –§—É–Ω–∫—Ü–∏–∏ CryptoPay API (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)
async def create_invoice(amount=1.0, asset='USDT'):
    url = "https://pay.crypt.bot/api/createInvoice"
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN,
        "Content-Type": "application/json"
    }

    data = {
        "asset": asset,
        "amount": str(amount),
        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ Crypto Rush Casino - {amount} {asset}"
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    if result.get('ok'):
                        return result.get('result')
                return None
    except Exception as e:
        logger.error(f"Exception in create_invoice: {e}")
        return None

async def check_invoice(invoice_id):
    url = f"https://pay.crypt.bot/api/getInvoices"
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN,
        "Content-Type": "application/json"
    }

    params = {"invoice_ids": invoice_id}

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=params) as response:
                if response.status == 200:
                    result = await response.json()
                    if result.get('ok'):
                        invoices = result.get('result', {}).get('items', [])
                        if invoices:
                            invoice_data = invoices[0]
                            return {
                                'status': invoice_data.get('status'),
                                'amount': float(invoice_data.get('amount', 0)),
                                'asset': invoice_data.get('asset', 'USDT'),
                                'paid': invoice_data.get('status') == 'paid'
                            }
                return {'status': 'unknown', 'amount': 0, 'asset': 'USDT', 'paid': False}
    except Exception as e:
        logger.error(f"Exception in check_invoice: {e}")
        return {'status': 'unknown', 'amount': 0, 'asset': 'USDT', 'paid': False}

# –ò–≥—Ä–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def play_coin_clash(bet_amount, selected_side):
    """PvP –æ—Ä—ë–ª/—Ä–µ—à–∫–∞"""
    result = random.choice(['heads', 'tails'])
    win = result == selected_side

    if win:
        multiplier = 1.95  # –ù–µ–±–æ–ª—å—à–∞—è –∫–æ–º–∏—Å—Å–∏—è –∫–∞–∑–∏–Ω–æ
        win_amount = bet_amount * multiplier
        return {'win': True, 'multiplier': multiplier, 'win_amount': win_amount, 'result': result}
    else:
        return {'win': False, 'multiplier': 0, 'win_amount': 0, 'result': result}

def play_dice_dynasty(bet_amount, user_boosts=0):
    """–ü—Ä–æ–∫–∞—á–∏–≤–∞–µ–º—ã–µ –∫–æ—Å—Ç–∏ —Å –±—É—Å—Ç–∞–º–∏"""
    dice_results = [random.randint(1, 6) for _ in range(2)]
    total = sum(dice_results)

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±—É—Å—Ç–æ–≤
    if user_boosts > 0:
        boost_chance = min(user_boosts * 0.05, 0.3)  # –î–æ 30% —à–∞–Ω—Å–∞ –±—É—Å—Ç–∞
        if random.random() < boost_chance:
            total = min(total + random.randint(1, 3), 12)

    # –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–ª–∞—Ç –¥–ª—è —Å—É–º–º—ã –∫–æ—Å—Ç–µ–π
    multipliers = {
        2: 35, 3: 17, 4: 11, 5: 8, 6: 6, 7: 5,
        8: 6, 9: 8, 10: 11, 11: 17, 12: 35
    }

    multiplier = multipliers.get(total, 1)
    win = total in [2, 3, 11, 12] or random.random() < 0.4

    if win:
        win_amount = bet_amount * multiplier
        return {'win': True, 'multiplier': multiplier, 'win_amount': win_amount, 'dice': dice_results, 'total': total}
    else:
        return {'win': False, 'multiplier': 0, 'win_amount': 0, 'dice': dice_results, 'total': total}

def play_crash_rocket(bet_amount, cash_out_at=None):
    """–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å —Å –º–Ω–æ–∂–∏—Ç–µ–ª—è–º–∏ –¥–æ x100"""
    # –°–∏–º—É–ª—è—Ü–∏—è –∫—Ä–∞—à-–∏–≥—Ä—ã
    crash_point = random.uniform(1.01, 100.0)

    # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    if random.random() < 0.7:  # 70% –∏–≥—Ä –∫—Ä–∞—à–∞—Ç—Å—è —Ä–∞–Ω–æ
        crash_point = random.uniform(1.01, 3.0)
    elif random.random() < 0.9:  # 20% –∏–≥—Ä –∫—Ä–∞—à–∞—Ç—Å—è –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
        crash_point = random.uniform(3.0, 10.0)
    # 10% –∏–≥—Ä –∏–¥—É—Ç –≤—ã—Å–æ–∫–æ

    if cash_out_at and cash_out_at < crash_point:
        # –ò–≥—Ä–æ–∫ —É—Å–ø–µ–ª –∑–∞–±—Ä–∞—Ç—å
        win_amount = bet_amount * cash_out_at
        return {'win': True, 'multiplier': cash_out_at, 'win_amount': win_amount, 'crash_point': crash_point}
    else:
        # –ò–≥—Ä–æ–∫ –Ω–µ —É—Å–ø–µ–ª –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–ª —Ç–æ—á–∫—É –≤—ã—Ö–æ–¥–∞
        return {'win': False, 'multiplier': 0, 'win_amount': 0, 'crash_point': crash_point}

def play_slot_legends(bet_amount, user_multiplier=1.0):
    """–°–ª–æ—Ç—ã —Å –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–º–∏ –¥–∂–µ–∫–ø–æ—Ç–∞–º–∏"""
    symbols = ['üçí', 'üçã', 'üçä', 'üçá', '‚≠ê', 'üíé', 'üé∞', 'üèÜ']
    weights = [25, 20, 15, 15, 10, 8, 4, 3]  # –í–µ—Å–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤

    reels = []
    for _ in range(3):
        reel = random.choices(symbols, weights=weights, k=1)[0]
        reels.append(reel)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
    if reels[0] == reels[1] == reels[2]:  # –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
        symbol_multipliers = {
            'üçí': 5, 'üçã': 10, 'üçä': 15, 'üçá': 20,
            '‚≠ê': 50, 'üíé': 100, 'üé∞': 500, 'üèÜ': 1000
        }
        base_multiplier = symbol_multipliers.get(reels[0], 5)
        final_multiplier = base_multiplier * user_multiplier
        win_amount = bet_amount * final_multiplier
        return {'win': True, 'multiplier': final_multiplier, 'win_amount': win_amount, 'reels': reels}
    elif reels[0] == reels[1] or reels[1] == reels[2]:  # –î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
        base_multiplier = 2 * user_multiplier
        win_amount = bet_amount * base_multiplier
        return {'win': True, 'multiplier': base_multiplier, 'win_amount': win_amount, 'reels': reels}
    else:
        return {'win': False, 'multiplier': 0, 'win_amount': 0, 'reels': reels}

def open_case(case_type, user_id):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞"""
    case_config = CASES_CONFIG.get(case_type)
    if not case_config:
        return None

    # –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–Ω—Å–æ–≤
    total_chance = sum(item['chance'] for item in ITEMS_POOL)
    rand_value = random.uniform(0, total_chance)

    current_chance = 0
    for item in ITEMS_POOL:
        current_chance += item['chance']
        if rand_value <= current_chance:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            add_item_to_inventory(user_id, item)
            return item

    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
    return ITEMS_POOL[0]

def add_item_to_inventory(user_id, item):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"""
    conn = sqlite3.connect('casino.db')
    c = conn.cursor()

    user = get_user(user_id)
    if not user:
        conn.close()
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ inventory (–∏–Ω–¥–µ–∫—Å 24)
        if len(user) > 24 and user[24]:
            inventory = json.loads(user[24])
        else:
            inventory = []
    except:
        inventory = []

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    item_with_timestamp = {
        **item,
        'received_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'id': len(inventory) + 1
    }

    inventory.append(item_with_timestamp)

    c.execute("UPDATE users SET inventory = ? WHERE user_id = ?", (json.dumps(inventory), user_id))
    conn.commit()
    conn.close()

def get_user_inventory(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = get_user(user_id)
    if not user:
        return []

    try:
        if len(user) > 24 and user[24]:
            return json.loads(user[24])
        else:
            return []
    except:
        return []

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    referrer_id = None
    if len(message.text.split()) > 1:
        try:
            referrer_id = int(message.text.split()[1])
            if referrer_id == user_id:
                referrer_id = None
            elif get_user(referrer_id) is None:
                referrer_id = None
        except:
            pass

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await check_subscription(user_id):
        await message.answer(
            "üîí –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=get_subscription_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = get_user(user_id)
    is_new_user = user is None

    if is_new_user:
        create_user(user_id, username, first_name, referrer_id)
        logger.info(f"New user registered: {user_id} (@{username})")

        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        if referrer_id:
            conn = sqlite3.connect('casino.db')
            c = conn.cursor()
            c.execute("UPDATE users SET referrals_count = referrals_count + 1, bonus_balance = bonus_balance + 5 WHERE user_id = ?", (referrer_id,))
            conn.commit()
            conn.close()

        welcome_text = f"""üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Rush Casino!

üéÅ –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –±–æ–Ω—É—Å—ã:
üíé 5.0 USDT –±–æ–Ω—É—Å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
ü™ô 1000 RUSH Coins
‚≠ê 100 Bonus Points

{'ü§ù –í—ã –ø—Ä–∏—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ - –≤–∞—à —Ä–µ—Ñ–µ—Ä–µ—Ä –ø–æ–ª—É—á–∏–ª 5 USDT!' if referrer_id else ''}

üåü –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ –∫–∞–∑–∏–Ω–æ:
‚Ä¢ 10 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä —Å –æ—Å–æ–±—ã–º–∏ –º–µ—Ö–∞–Ω–∏–∫–∞–º–∏
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∫–µ–π—Å–æ–≤ —Å CS:GO –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
‚Ä¢ –¢—Ä—ë—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏ –∏ —Ç—É—Ä–Ω–∏—Ä—ã
‚Ä¢ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è

üé∞ –ö–∞–Ω–∞–ª: {CASINO_CHANNEL_URL}
üì¢ –ù–æ–≤–æ—Å—Ç–∏: {NEWS_CHANNEL_URL}"""

        await message.answer(welcome_text, reply_markup=get_main_menu_keyboard())
    else:
        await show_main_menu(message)

async def show_main_menu(message):
    user = get_user(message.from_user.id)
    username = message.from_user.username or user[2]  # first_name
    level_info = get_user_level_info(message.from_user.id)

    welcome_text = f"""üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!

üìä –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {level_info['level']} (–æ–ø—ã—Ç: {level_info['experience']}/{level_info['exp_for_next']})
üí∞ –ë–∞–ª–∞–Ω—Å—ã:
  ‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π: {user[3]:.2f} USDT
  ‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–π: {user[4]:.2f} USDT
  ‚Ä¢ RUSH Coins: {user[5]:,}
  ‚Ä¢ Bonus Points: {user[6]:,}
  ‚Ä¢ Loyalty Tokens: {user[7]:,}

üé∞ –ö–∞–Ω–∞–ª: {CASINO_CHANNEL_URL}
üì¢ –ù–æ–≤–æ—Å—Ç–∏: {NEWS_CHANNEL_URL}"""

    await message.answer(welcome_text, reply_markup=get_main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback_query
@dp.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if await check_subscription(user_id):
        await callback_query.message.delete()
        await show_main_menu(callback_query.message)
    else:
        await callback_query.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!")

@dp.callback_query(F.data == "main_menu")
async def main_menu_callback(callback_query: types.CallbackQuery):
    user = get_user(callback_query.from_user.id)
    username = callback_query.from_user.username or user[2]
    level_info = get_user_level_info(callback_query.from_user.id)

    welcome_text = f"""üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!

üìä –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {level_info['level']} (–æ–ø—ã—Ç: {level_info['experience']}/{level_info['exp_for_next']})
üí∞ –ë–∞–ª–∞–Ω—Å—ã:
  ‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π: {user[3]:.2f} USDT
  ‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–π: {user[4]:.2f} USDT
  ‚Ä¢ RUSH Coins: {user[5]:,}
  ‚Ä¢ Bonus Points: {user[6]:,}
  ‚Ä¢ Loyalty Tokens: {user[7]:,}

üé∞ –ö–∞–Ω–∞–ª: {CASINO_CHANNEL_URL}
üì¢ –ù–æ–≤–æ—Å—Ç–∏: {NEWS_CHANNEL_URL}"""

    await callback_query.message.edit_text(welcome_text, reply_markup=get_main_menu_keyboard())

@dp.callback_query(F.data == "games_menu")
async def games_menu_callback(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:\n\n" +
        "ü™ô Coin Clash - PvP –æ—Ä—ë–ª/—Ä–µ—à–∫–∞ —Å live-—Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º\n" +
        "üé≤ Dice Dynasty - –ü—Ä–æ–∫–∞—á–∏–≤–∞–µ–º—ã–µ –∫–æ—Å—Ç–∏ —Å –±—É—Å—Ç–∞–º–∏\n" +
        "üöÄ Crash Rocket - –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –¥–æ x100\n" +
        "üé∞ Slot Legends - –°–ª–æ—Ç—ã —Å –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–º–∏ –¥–∂–µ–∫–ø–æ—Ç–∞–º–∏\n" +
        "üéØ Roulette Rush - –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞\n" +
        "üÉè Blackjack Battle - –¢—É—Ä–Ω–∏—Ä–Ω—ã–π –±–ª—ç–∫–¥–∂–µ–∫\n" +
        "üíé Mines Mayhem - –°–∞–ø—ë—Ä —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏\n" +
        "üé® Wheel Wizard - –ú–∞–≥–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã\n" +
        "‚ô†Ô∏è Poker Pro - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–∫–µ—Ä\n" +
        "üí≥ Baccarat Blitz - –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—ã–π –±–∞–∫–∫–∞—Ä–∞",
        reply_markup=get_games_keyboard()
    )

@dp.callback_query(F.data == "cases_menu")
async def cases_menu_callback(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "üì¶ –ö–µ–π—Å—ã —Å CS:GO –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏:\n\n" +
        "–û—Ç–∫—Ä–æ–π—Ç–µ –∫–µ–π—Å—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–¥–∫–∏–µ —Å–∫–∏–Ω—ã!\n" +
        "–û—Ç –æ–±—ã—á–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–æ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –Ω–æ–∂–µ–π.\n\n" +
        "üíé –†–µ–¥–∫–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤:\n" +
        "‚Ä¢ Common - –æ–±—ã—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã\n" +
        "‚Ä¢ Rare - —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã\n" +
        "‚Ä¢ Legendary - –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã",
        reply_markup=get_cases_keyboard()
    )

@dp.callback_query(F.data.startswith("case_"))
async def case_callback(callback_query: types.CallbackQuery, state: FSMContext):
    case_type = callback_query.data.replace("case_", "")
    case_config = CASES_CONFIG.get(case_type)

    if not case_config:
        await callback_query.answer("‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    user = get_user(callback_query.from_user.id)
    if user[3] < case_config['price']:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        await callback_query.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ {case_config['price']} USDT")
        return

    # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
    update_user_balance(callback_query.from_user.id, -case_config['price'], 'main')

    # –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
    item = open_case(case_type, callback_query.from_user.id)

    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
    add_experience(callback_query.from_user.id, 25)

    rarity_colors = {
        'common': '‚ö™',
        'rare': 'üîµ', 
        'legendary': 'üü°'
    }

    rarity_emoji = rarity_colors.get(item['rarity'], '‚ö™')

    result_text = f"""üéâ –ö–µ–π—Å {case_config['emoji']} {case_config['name']} –æ—Ç–∫—Ä—ã—Ç!

{rarity_emoji} **{item['name']}**
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {item['value']:.2f} USDT
üè∑Ô∏è –†–µ–¥–∫–æ—Å—Ç—å: {item['rarity'].title()}

–ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û—Ç–∫—Ä—ã—Ç—å –µ—â—ë", callback_data=f"case_{case_type}")],
        [InlineKeyboardButton(text="üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö –∫–µ–π—Å–∞–º", callback_data="cases_menu")]
    ])

    await callback_query.message.edit_text(result_text, reply_markup=keyboard, parse_mode='Markdown')

@dp.callback_query(F.data == "inventory")
async def inventory_callback(callback_query: types.CallbackQuery):
    inventory = get_user_inventory(callback_query.from_user.id)

    if not inventory:
        await callback_query.message.edit_text(
            "üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –∫–µ–π—Å—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì¶ –ö –∫–µ–π—Å–∞–º", callback_data="cases_menu")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        )
        return

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
    common_items = [item for item in inventory if item['rarity'] == 'common']
    rare_items = [item for item in inventory if item['rarity'] == 'rare'] 
    legendary_items = [item for item in inventory if item['rarity'] == 'legendary']

    total_value = sum(item['value'] for item in inventory)

    inventory_text = f"""üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å ({len(inventory)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤)
üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_value:.2f} USDT

"""

    if legendary_items:
        inventory_text += f"üü° **–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ** ({len(legendary_items)}):\n"
        for item in legendary_items[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
            inventory_text += f"‚Ä¢ {item['name']} - {item['value']:.2f} USDT\n"
        if len(legendary_items) > 5:
            inventory_text += f"... –∏ –µ—â—ë {len(legendary_items) - 5}\n"
        inventory_text += "\n"

    if rare_items:
        inventory_text += f"üîµ **–†–µ–¥–∫–∏–µ** ({len(rare_items)}):\n"
        for item in rare_items[:3]:
            inventory_text += f"‚Ä¢ {item['name']} - {item['value']:.2f} USDT\n"
        if len(rare_items) > 3:
            inventory_text += f"... –∏ –µ—â—ë {len(rare_items) - 3}\n"
        inventory_text += "\n"

    if common_items:
        inventory_text += f"‚ö™ **–û–±—ã—á–Ω—ã–µ** ({len(common_items)}):\n"
        for item in common_items[:3]:
            inventory_text += f"‚Ä¢ {item['name']} - {item['value']:.2f} USDT\n"
        if len(common_items) > 3:
            inventory_text += f"... –∏ –µ—â—ë {len(common_items) - 3}\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –ü—Ä–æ–¥–∞—Ç—å –≤—Å—ë", callback_data="sell_all_items")],
        [InlineKeyboardButton(text="üì¶ –ö –∫–µ–π—Å–∞–º", callback_data="cases_menu")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

    await callback_query.message.edit_text(inventory_text, reply_markup=keyboard, parse_mode='Markdown')

@dp.callback_query(F.data == "sell_all_items")
async def sell_all_items_callback(callback_query: types.CallbackQuery):
    inventory = get_user_inventory(callback_query.from_user.id)

    if not inventory:
        await callback_query.answer("‚ùå –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!")
        return

    total_value = sum(item['value'] for item in inventory)

    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
    update_user_balance(callback_query.from_user.id, total_value, 'main')

    # –û—á–∏—Å—Ç–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    conn = sqlite3.connect('casino.db')
    c = conn.cursor()
    c.execute("UPDATE users SET inventory = '[]' WHERE user_id = ?", (callback_query.from_user.id,))
    conn.commit()
    conn.close()

    await callback_query.message.edit_text(
        f"‚úÖ –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø—Ä–æ–¥–∞–Ω—ã!\n\nüí∞ –ü–æ–ª—É—á–µ–Ω–æ: {total_value:.2f} USDT\n–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¶ –ö –∫–µ–π—Å–∞–º", callback_data="cases_menu")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )

@dp.callback_query(F.data == "profile")
async def profile_callback(callback_query: types.CallbackQuery):
    user = get_user(callback_query.from_user.id)
    if not user:
        return

    level_info = get_user_level_info(callback_query.from_user.id)
    winrate = (user[10] / user[9] * 100) if user[9] > 0 else 0

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏–≥–∏
    if user[8] < 100:
        league = "Bronze ü•â"
    elif user[8] < 1000:
        league = "Silver ü•à"
    elif user[8] < 10000:
        league = "Gold ü•á"
    else:
        league = "Diamond üíé"

    profile_text = f"""üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞

üÜî ID: `{user[0]}`
üë§ –ò–º—è: {user[2]}
{'üéÆ Username: @' + user[1] if user[1] else ''}

üìä –£—Ä–æ–≤–µ–Ω—å: {level_info['level']} 
‚ö° –û–ø—ã—Ç: {level_info['experience']}/{level_info['exp_for_next']} ({level_info['progress']:.1f}%)
üèÜ –õ–∏–≥–∞: {league}

üí∞ –ë–∞–ª–∞–Ω—Å—ã:
  ‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π: {user[3]:.2f} USDT
  ‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–π: {user[4]:.2f} USDT
  ‚Ä¢ RUSH Coins: {user[5]:,}
  ‚Ä¢ Bonus Points: {user[6]:,}
  ‚Ä¢ Loyalty Tokens: {user[7]:,}

üéÆ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
  ‚Ä¢ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {user[9]}
  ‚Ä¢ –ü–æ–±–µ–¥: {user[10]}
  ‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {winrate:.1f}%
  ‚Ä¢ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {user[8]:.2f} USDT

ü§ù –†–µ—Ñ–µ—Ä–∞–ª—ã: {user[12]} —á–µ–ª–æ–≤–µ–∫
üí∏ –î–æ—Ö–æ–¥ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user[11]:.2f} USDT

üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[14]}"""

    await callback_query.message.edit_text(profile_text, reply_markup=get_profile_keyboard(), parse_mode='Markdown')

@dp.callback_query(F.data == "daily_bonus")
async def daily_bonus_callback(callback_query: types.CallbackQuery):
    if check_daily_bonus(callback_query.from_user.id):
        bonus_info = claim_daily_bonus(callback_query.from_user.id)

        if bonus_info:
            text = f"""üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!

üíé –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: +{bonus_info['bonus']:.2f} USDT
ü™ô RUSH Coins: +{bonus_info['rush_coins']}
üî• –°—Ç—Ä–∏–∫: {bonus_info['streak']} –¥–Ω–µ–π

{'üéâ –ù–µ–¥–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å! –ù–∞–≥—Ä–∞–¥—ã —É–¥–≤–æ–µ–Ω—ã!' if bonus_info['streak'] >= 7 else ''}

–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –±–æ–Ω—É—Å–æ–º!"""
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞!"
    else:
        text = "‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω!\n\n–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –±–æ–Ω—É—Å–æ–º."

    await callback_query.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")]
        ])
    )

@dp.callback_query(F.data == "promo")
async def promo_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.waiting_promo_code)

    await callback_query.message.edit_text(
        """üéØ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:

üéÅ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:
‚Ä¢ WELCOME2024 - 10 USDT –±–æ–Ω—É—Å–∞
‚Ä¢ RUSH100 - 25 USDT –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞  
‚Ä¢ CRYPTO50 - 5 USDT –±–æ–Ω—É—Å–∞
‚Ä¢ VIP2024 - 100 USDT (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)

–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:""",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")]
        ])
    )

@dp.message(StateFilter(UserStates.waiting_promo_code))
async def process_promo_code(message: types.Message, state: FSMContext):
    promo_code = message.text.strip().upper()
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if promo_code not in PROMO_CODES:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    conn = sqlite3.connect('casino.db')
    c = conn.cursor()
    c.execute("SELECT * FROM used_promocodes WHERE user_id = ? AND promo_code = ?", (user_id, promo_code))
    used = c.fetchone()

    if used:
        await message.answer("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!")
        conn.close()
        await state.clear()
        return

    promo_info = PROMO_CODES[promo_code]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    if promo_info['uses_left'] <= 0:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç!")
        conn.close()
        await state.clear()
        return

    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    balance_type = promo_info['type']
    bonus_amount = promo_info['bonus']

    update_user_balance(user_id, bonus_amount, balance_type)

    # –ó–∞–ø–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    c.execute("INSERT INTO used_promocodes (user_id, promo_code, used_date) VALUES (?, ?, ?)",
              (user_id, promo_code, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))

    # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    PROMO_CODES[promo_code]['uses_left'] -= 1

    conn.commit()
    conn.close()

    balance_name = "–æ—Å–Ω–æ–≤–Ω–æ–π" if balance_type == "main" else "–±–æ–Ω—É—Å–Ω—ã–π"

    await message.answer(
        f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\nüí∞ –ü–æ–ª—É—á–µ–Ω–æ: {bonus_amount:.2f} USDT –Ω–∞ {balance_name} –±–∞–ª–∞–Ω—Å",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    await state.clear()

@dp.callback_query(F.data == "balance")
async def balance_callback(callback_query: types.CallbackQuery):
    user = get_user(callback_query.from_user.id)
    if not user:
        return

    balance_text = f"""üí∞ –í–∞—à–∏ –±–∞–ª–∞–Ω—Å—ã:

üí≥ –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å: {user[3]:.2f} USDT
üéÅ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {user[4]:.2f} USDT

ü™ô RUSH Coins: {user[5]:,}
‚≠ê Bonus Points: {user[6]:,}  
üèÖ Loyalty Tokens: {user[7]:,}

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üíµ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {user[3] + user[4]:.2f} USDT

üí° RUSH Coins - –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±—É—Å—Ç–æ–≤
‚≠ê Bonus Points - –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏—Å—Å–∏–π
üèÖ Loyalty Tokens - –ø—Ä–µ–º–∏—É–º –≤–∞–ª—é—Ç–∞"""

    await callback_query.message.edit_text(balance_text, reply_markup=get_balance_keyboard())

@dp.callback_query(F.data == "deposit")
async def deposit_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.waiting_deposit_amount)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ 5 USDT", callback_data="quick_deposit_5"),
         InlineKeyboardButton(text="üí∞ 10 USDT", callback_data="quick_deposit_10")],
        [InlineKeyboardButton(text="üí∞ 25 USDT", callback_data="quick_deposit_25"),
         InlineKeyboardButton(text="üí∞ 50 USDT", callback_data="quick_deposit_50")],
        [InlineKeyboardButton(text="üí∞ 100 USDT", callback_data="quick_deposit_100")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="balance")]
    ])

    await callback_query.message.edit_text(
        """üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:
‚Ä¢ USDT (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
‚Ä¢ BTC 
‚Ä¢ ETH
‚Ä¢ TON

üí° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 USDT
‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ CryptoPay

–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:""",
        reply_markup=keyboard
    )

@dp.callback_query(F.data.startswith("quick_deposit_"))
async def quick_deposit_callback(callback_query: types.CallbackQuery, state: FSMContext):
    amount = float(callback_query.data.split("_")[2])
    await process_deposit_creation(callback_query, amount, state)

async def process_deposit_creation(callback_query, amount, state):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞"""
    logger.info(f"Creating invoice for user {callback_query.from_user.id} with amount {amount}")
    invoice = await create_invoice(amount)

    if invoice:
        pay_url = invoice.get('pay_url')
        invoice_id = invoice.get('invoice_id')

        await state.update_data(invoice_id=invoice_id, deposit_amount=amount)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="balance")]
        ])

        await callback_query.message.edit_text(
            f"üí≥ –°—á—ë—Ç —Å–æ–∑–¥–∞–Ω!\n\nüí∞ –ö –æ–ø–ª–∞—Ç–µ: {amount:.2f} USDT\nüÜî ID —Å—á—ë—Ç–∞: `{invoice_id}`\n\n1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏—Ç—å'\n2Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    else:
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞!\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="deposit")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="balance")]
            ])
        )

@dp.message(StateFilter(UserStates.waiting_deposit_amount))
async def process_deposit_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount < 1.0:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 USDT")
            return

        # –°–æ–∑–¥–∞–µ–º callback_query –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        class FakeCallbackQuery:
            def __init__(self, message):
                self.message = message
                self.from_user = message.from_user

        fake_callback = FakeCallbackQuery(message)
        await process_deposit_creation(fake_callback, amount, state)

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")

@dp.callback_query(F.data == "check_payment")
async def check_payment_callback(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    invoice_id = data.get('invoice_id')
    deposit_amount = data.get('deposit_amount')

    if not invoice_id:
        await callback_query.answer("‚ùå –°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    invoice_data = await check_invoice(invoice_id)

    if invoice_data['paid']:
        amount = deposit_amount if deposit_amount else invoice_data['amount']

        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å
        update_user_balance(callback_query.from_user.id, amount, 'main')

        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
        exp_amount = int(amount * 10)  # 10 –æ–ø—ã—Ç–∞ –∑–∞ –∫–∞–∂–¥—ã–π USDT
        level_up = add_experience(callback_query.from_user.id, exp_amount)

        # –ó–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        conn = sqlite3.connect('casino.db')
        c = conn.cursor()
        c.execute("INSERT INTO transactions (user_id, amount, currency, type, date, check_id) VALUES (?, ?, ?, ?, ?, ?)",
                  (callback_query.from_user.id, amount, invoice_data['asset'], 'deposit', 
                   datetime.now().strftime("%Y-%m-%d %H:%M:%S"), invoice_id))
        conn.commit()
        conn.close()

        success_text = f"""‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!

üí∞ –ó–∞—á–∏—Å–ª–µ–Ω–æ: {amount:.2f} {invoice_data['asset']}
‚ö° –û–ø—ã—Ç: +{exp_amount}
{'üéâ –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è!' if level_up else ''}

–°—Ä–µ–¥—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏–≥—Ä—ã!"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="games_menu")],
            [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])

        await callback_query.message.edit_text(success_text, reply_markup=keyboard)
        await state.clear()
    else:
        await callback_query.answer("‚è≥ –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ò–≥—Ä–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.callback_query(F.data.startswith("game_"))
async def game_callback(callback_query: types.CallbackQuery, state: FSMContext):
    game_type = callback_query.data.replace("game_", "")
    game_config = GAMES_CONFIG.get(game_type)

    if not game_config:
        await callback_query.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    await state.update_data(selected_game=game_type)
    await state.set_state(UserStates.waiting_bet_amount)

    game_info = f"""üéÆ {game_config['emoji']} {game_config['name']}

üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {game_config['min_bet']} USDT
üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: x{game_config['max_multiplier']}

–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏:"""

    # –ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="0.5 USDT", callback_data="quick_bet_0.5"),
         InlineKeyboardButton(text="1 USDT", callback_data="quick_bet_1")],
        [InlineKeyboardButton(text="5 USDT", callback_data="quick_bet_5"),
         InlineKeyboardButton(text="10 USDT", callback_data="quick_bet_10")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö –∏–≥—Ä–∞–º", callback_data="games_menu")]
    ])

    await callback_query.message.edit_text(game_info, reply_markup=keyboard)

@dp.callback_query(F.data.startswith("quick_bet_"))
async def quick_bet_callback(callback_query: types.CallbackQuery, state: FSMContext):
    bet_amount = float(callback_query.data.split("_")[2])
    await process_game_bet(callback_query, bet_amount, state)

@dp.message(StateFilter(UserStates.waiting_bet_amount))
async def process_bet_amount(message: types.Message, state: FSMContext):
    try:
        bet_amount = float(message.text)

        # –°–æ–∑–¥–∞–µ–º fake callback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        class FakeCallbackQuery:
            def __init__(self, message):
                self.message = message
                self.from_user = message.from_user

        fake_callback = FakeCallbackQuery(message)
        await process_game_bet(fake_callback, bet_amount, state)

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")

async def process_game_bet(callback_query, bet_amount, state):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏ –≤ –∏–≥—Ä–µ"""
    data = await state.get_data()
    game_type = data.get('selected_game')
    game_config = GAMES_CONFIG.get(game_type)

    if bet_amount < game_config['min_bet']:
        if hasattr(callback_query, 'answer'):
            await callback_query.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {game_config['min_bet']} USDT")
        else:
            await callback_query.message.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {game_config['min_bet']} USDT")
        return

    user = get_user(callback_query.from_user.id)
    if bet_amount > user[3]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        if hasattr(callback_query, 'answer'):
            await callback_query.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ë–∞–ª–∞–Ω—Å: {user[3]:.2f} USDT")
        else:
            await callback_query.message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ë–∞–ª–∞–Ω—Å: {user[3]:.2f} USDT")
        return

    # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
    update_user_balance(callback_query.from_user.id, -bet_amount, 'main')

    # –í—ã–±–æ—Ä –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
    if game_type == 'coin_clash':
        result = play_coin_clash(bet_amount, 'heads')  # –£–ø—Ä–æ—â—ë–Ω–Ω–æ
    elif game_type == 'dice_dynasty':
        # –î–ª—è dice_boosts –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ç–∞–∫ –∫–∞–∫ –∫–æ–ª–æ–Ω–∫–∞ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
        user_boosts = 0
        result = play_dice_dynasty(bet_amount, user_boosts)
    elif game_type == 'crash_rocket':
        cash_out = random.uniform(1.1, 5.0) if random.random() < 0.6 else None
        result = play_crash_rocket(bet_amount, cash_out)
    elif game_type == 'slot_legends':
        # –î–ª—è slot_multiplier –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        user_multiplier = 1.0
        result = play_slot_legends(bet_amount, user_multiplier)
    else:
        # –ë–∞–∑–æ–≤–∞—è –∏–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä
        win_chance = 0.45
        multiplier = random.uniform(1.5, game_config['max_multiplier'])
        is_win = random.random() < win_chance

        if is_win:
            win_amount = bet_amount * multiplier
            result = {'win': True, 'multiplier': multiplier, 'win_amount': win_amount}
        else:
            result = {'win': False, 'multiplier': 0, 'win_amount': 0}

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if result['win']:
        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞
        update_user_balance(callback_query.from_user.id, result['win_amount'], 'main')

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        conn = sqlite3.connect('casino.db')
        c = conn.cursor()
        c.execute("UPDATE users SET total_bets = total_bets + ?, games_played = games_played + 1, wins = wins + 1 WHERE user_id = ?",
                  (bet_amount, callback_query.from_user.id))

        # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
        c.execute("SELECT referrer_id FROM users WHERE user_id = ?", (callback_query.from_user.id,))
        referrer = c.fetchone()
        if referrer and referrer[0]:
            referral_bonus = result['win_amount'] * 0.25  # 25% —Å –≤—ã–∏–≥—Ä—ã—à–∞
            c.execute("UPDATE users SET referral_earnings = referral_earnings + ?, bonus_balance = bonus_balance + ? WHERE user_id = ?",
                      (referral_bonus, referral_bonus, referrer[0]))

        conn.commit()
        conn.close()

        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
        exp_amount = int(result['win_amount'] * 5)
        level_up = add_experience(callback_query.from_user.id, exp_amount)

        result_text = f"""üéâ –ü–û–ë–ï–î–ê!

üéÆ {game_config['emoji']} {game_config['name']}
üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount:.2f} USDT
üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{result['multiplier']:.2f}
üèÜ –í—ã–∏–≥—Ä—ã—à: {result['win_amount']:.2f} USDT
‚ö° –û–ø—ã—Ç: +{exp_amount}
{'üéâ –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è!' if level_up else ''}"""

    else:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        conn = sqlite3.connect('casino.db')
        c = conn.cursor()
        c.execute("UPDATE users SET total_bets = total_bets + ?, games_played = games_played + 1 WHERE user_id = ?",
                  (bet_amount, callback_query.from_user.id))
        conn.commit()
        conn.close()

        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –∑–∞ —É—á–∞—Å—Ç–∏–µ
        exp_amount = 5
        add_experience(callback_query.from_user.id, exp_amount)

        result_text = f"""üòû –ü–æ—Ä–∞–∂–µ–Ω–∏–µ

üéÆ {game_config['emoji']} {game_config['name']}
üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount:.2f} USDT
üí∏ –ü–æ—Ç–µ—Ä—è–Ω–æ: {bet_amount:.2f} USDT
‚ö° –û–ø—ã—Ç: +{exp_amount}"""

    # –ó–∞–ø–∏—Å—å –∏–≥—Ä—ã –≤ –ë–î
    conn = sqlite3.connect('casino.db')
    c = conn.cursor()
    c.execute("INSERT INTO games (user_id, game_type, bet_amount, win_amount, result, multiplier, date) VALUES (?, ?, ?, ?, ?, ?, ?)",
              (callback_query.from_user.id, game_type, bet_amount, result.get('win_amount', 0), 
               'win' if result['win'] else 'loss', result.get('multiplier', 0), 
               datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    conn.commit()
    conn.close()

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª
    await publish_bet_result_to_channel(
        callback_query.from_user.id,
        callback_query.from_user.username,
        game_config['name'],
        bet_amount,
        result
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ò–≥—Ä–∞—Ç—å –µ—â—ë", callback_data=f"game_{game_type}")],
        [InlineKeyboardButton(text="üéÆ –î—Ä—É–≥–∞—è –∏–≥—Ä–∞", callback_data="games_menu")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    if hasattr(callback_query, 'message'):
        await callback_query.message.edit_text(result_text, reply_markup=keyboard)
    else:
        await callback_query.message.answer(result_text, reply_markup=keyboard)

    await state.clear()

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª
async def publish_bet_result_to_channel(user_id, username, game_name, bet_amount, result):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ç–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª"""
    username_display = f"@{username}" if username else "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –∏–≥—Ä–æ–∫"

    if result['win']:
        emoji = "üéâ"
        status = "–ü–û–ë–ï–î–ê"
        amount_text = f"üí∞ –í—ã–∏–≥—Ä—ã—à: {result['win_amount']:.2f} USDT (x{result['multiplier']:.2f})"
    else:
        emoji = "üòû"
        status = "–ü–û–†–ê–ñ–ï–ù–ò–ï"
        amount_text = f"üí∏ –ü–æ—Ç–µ—Ä—è–Ω–æ: {bet_amount:.2f} USDT"

    text = f"""{emoji} {status} | {username_display}

üéÆ –ò–≥—Ä–∞: {game_name}
üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount:.2f} USDT
{amount_text}

[üéÆ –ò–≥—Ä–∞—Ç—å](https://t.me/CryptoRushCazino_Bot) | [üì¶ –ö–µ–π—Å—ã](https://t.me/CryptoRushCazino_Bot?start=cases) | [ü§ù –†–µ—Ñ–µ—Ä–∞–ª—ã](https://t.me/CryptoRushCazino_Bot?start=ref)"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÆ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url="https://t.me/CryptoRushCazino_Bot")],
        [InlineKeyboardButton(text="üì¶ –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å", url="https://t.me/CryptoRushCazino_Bot?start=cases")]
    ])

    try:
        await bot.send_message(BETS_CHANNEL_ID, text, reply_markup=keyboard, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error publishing to channel: {e}")

# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
@dp.callback_query(F.data == "referral")
async def referral_callback(callback_query: types.CallbackQuery):
    user = get_user(callback_query.from_user.id)
    if not user:
        return

    level_info = get_user_level_info(callback_query.from_user.id)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—é
    if level_info['level'] < 5:
        ref_percent = "25% / 10% / 5%"
    elif level_info['level'] < 15:
        ref_percent = "30% / 12% / 6%"
    else:
        ref_percent = "35% / 15% / 7%"

    referral_text = f"""ü§ù –¢—Ä—ë—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞

üí∏ –í–∞—à–∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã: {ref_percent}
‚Ä¢ 1-–π —É—Ä–æ–≤–µ–Ω—å: –° –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚Ä¢ 2-–π —É—Ä–æ–≤–µ–Ω—å: –° —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤  
‚Ä¢ 3-–π —É—Ä–æ–≤–µ–Ω—å: –° —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 2-–≥–æ —É—Ä–æ–≤–Ω—è

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚îèüë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user[12]} —á–µ–ª–æ–≤–µ–∫
‚î£üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user[11]:.2f} USDT
‚î£üèÜ –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {level_info['level']}
‚îó‚ö° –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: `{user[13]}`

üéÅ –ë–æ–Ω—É—Å—ã:
‚Ä¢ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: +5 USDT –±–æ–Ω—É—Å–∞
‚Ä¢ 25% —Å –≤—ã–∏–≥—Ä—ã—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 1-–≥–æ —É—Ä–æ–≤–Ω—è
‚Ä¢ 10% —Å –≤—ã–∏–≥—Ä—ã—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 2-–≥–æ —É—Ä–æ–≤–Ω—è
‚Ä¢ 5% —Å –≤—ã–∏–≥—Ä—ã—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 3-–≥–æ —É—Ä–æ–≤–Ω—è

üí° –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –ø–∞—Å—Å–∏–≤–Ω–æ!"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="copy_ref_link")],
        [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="ref_stats")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

    await callback_query.message.edit_text(referral_text, reply_markup=keyboard, parse_mode='Markdown')

@dp.callback_query(F.data == "copy_ref_link")
async def copy_ref_link_callback(callback_query: types.CallbackQuery):
    user = get_user(callback_query.from_user.id)
    if user:
        await callback_query.answer(f"üìã –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!\n{user[13]}", show_alert=True)

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
def is_admin(username):
    return username in ADMIN_USERNAMES

@dp.message(Command("admin"))
async def admin_panel_command(message: types.Message):
    if not is_admin(message.from_user.username):
        return

    conn = sqlite3.connect('casino.db')
    c = conn.cursor()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    c.execute("SELECT COUNT(*) FROM users")
    total_users = c.fetchone()[0]

    c.execute("SELECT SUM(total_bets), SUM(balance), SUM(bonus_balance) FROM users")
    stats = c.fetchone()
    total_bets, total_balance, total_bonus = stats

    c.execute("SELECT COUNT(*) FROM games")
    total_games = c.fetchone()[0]

    c.execute("SELECT COUNT(*) FROM transactions WHERE type = 'deposit'")
    total_deposits = c.fetchone()[0]

    conn.close()

    admin_text = f"""üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {total_games}
üí≥ –î–µ–ø–æ–∑–∏—Ç–æ–≤: {total_deposits}
üí∞ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {total_bets or 0:.2f} USDT
üíµ –ë–∞–ª–∞–Ω—Å—ã –∏–≥—Ä–æ–∫–æ–≤: {(total_balance or 0) + (total_bonus or 0):.2f} USDT

üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/top_players - –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤
/add_bonus @username —Å—É–º–º–∞ - –î–æ–±–∞–≤–∏—Ç—å –±–æ–Ω—É—Å
/broadcast —Ç–µ–∫—Å—Ç - –†–∞—Å—Å—ã–ª–∫–∞"""

    await message.answer(admin_text)

@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    if not is_admin(message.from_user.username):
        return

    conn = sqlite3.connect('casino.db')
    c = conn.cursor()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º
    c.execute("SELECT game_type, COUNT(*), SUM(bet_amount), SUM(win_amount) FROM games GROUP BY game_type")
    game_stats = c.fetchall()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
    c.execute("SELECT DATE(date), COUNT(*), SUM(bet_amount) FROM games WHERE date >= date('now', '-7 days') GROUP BY DATE(date)")
    daily_stats = c.fetchall()

    conn.close()

    stats_text = "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\nüéÆ –ü–æ –∏–≥—Ä–∞–º:\n"
    for game_type, count, total_bet, total_win in game_stats:
        house_edge = ((total_bet - total_win) / total_bet * 100) if total_bet > 0 else 0
        stats_text += f"‚Ä¢ {game_type}: {count} –∏–≥—Ä, –æ–±–æ—Ä–æ—Ç {total_bet:.2f} USDT, –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å {house_edge:.1f}%\n"

    stats_text += "\nüìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n"
    for date, count, total_bet in daily_stats:
        stats_text += f"‚Ä¢ {date}: {count} –∏–≥—Ä, {total_bet:.2f} USDT\n"

    await message.answer(stats_text)

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø—Ä–æ—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
@dp.callback_query(F.data == "support")
async def support_callback(callback_query: types.CallbackQuery):
    support_text = f"""üí¨ –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏

üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {SUPPORT_USERNAME}
üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 10:00 - 22:00 (–ú–°–ö)

üìã –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:

‚ùì –ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?
–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ—Ñ–∏–ª—å' ‚Üí '–ë–∞–ª–∞–Ω—Å' ‚Üí '–ü–æ–ø–æ–ª–Ω–∏—Ç—å'

‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–µ–π—Å—ã?
–ü–æ–∫—É–ø–∞–π—Ç–µ –∫–µ–π—Å—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Ä–∞–∑–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏

‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞?
–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ % —Å –∏—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π

‚ùì –ü—Ä–æ–±–ª–µ–º—ã —Å –≤—ã–≤–æ–¥–æ–º?
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—É–º–º—ã –∏ –≤—Ä–µ–º–µ–Ω–∏

üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:
üì¢ –ö–∞–Ω–∞–ª: {CASINO_CHANNEL_URL}
üóûÔ∏è –ù–æ–≤–æ—Å—Ç–∏: {NEWS_CHANNEL_URL}"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=f"https://t.me/{SUPPORT_USERNAME.replace('@', '')}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

    await callback_query.message.edit_text(support_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
@dp.callback_query(F.data.in_(["withdraw", "exchange", "premium", "tournaments", "missions", "achievements", "stats", "ref_stats"]))
async def not_implemented_callback(callback_query: types.CallbackQuery):
    feature_names = {
        "withdraw": "–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤",
        "exchange": "–û–±–º–µ–Ω –≤–∞–ª—é—Ç", 
        "premium": "–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞",
        "tournaments": "–¢—É—Ä–Ω–∏—Ä—ã",
        "missions": "–°–∏—Å—Ç–µ–º–∞ –º–∏—Å—Å–∏–π",
        "achievements": "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
        "stats": "–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "ref_stats": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"
    }

    feature_name = feature_names.get(callback_query.data, "–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è")

    await callback_query.answer(f"‚è≥ {feature_name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", show_alert=True)

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message()
async def check_subscription_middleware(message: types.Message):
    if not await check_subscription(message.from_user.id):
        await message.answer(
            "üîí –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=get_subscription_keyboard()
        )
        return

@dp.callback_query()
async def check_subscription_middleware_callback(callback_query: types.CallbackQuery):
    if callback_query.data != "check_subscription" and not await check_subscription(callback_query.from_user.id):
        await callback_query.message.edit_text(
            "üîí –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=get_subscription_keyboard()
        )
        return

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    init_db()
    logger.info("üöÄ Crypto Rush Casino –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    # –ó–∞–ø—É—Å–∫ Flask –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    import threading
    from web_app import app as flask_app

    def run_flask():
        flask_app.run(host='0.0.0.0', port=5000, debug=False)

    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    logger.info("üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 5000")

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
